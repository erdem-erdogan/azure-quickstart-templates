{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "dnsLabelPrefix": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2012-R2-Datacenter",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
            }
        },
        "vaultName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Recovery Services Vault"
            }
        },
        "location": {
            "type": "string",
            "allowedValues": [
                "Central US",
                "East US",
                "East US 2",
                "North Central US",
                "South Central US",
                "West US",
                "North Europe",
                "West Europe",
                "East Asia",
                "Southeast Asia",
                "Japan East",
                "Japan West",
                "Brazil South",
                "Australia East",
                "Australia Southeast",
                "Central India",
                "South India"
            ],
            "metadata": {
                "description": "Location of the Recovery Services Vault"
            }
        },
        "policyName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Backup Policy"
            }
        },
        "scheduleRunDays": {
            "type": "array",
            "metadata": {
                "description": "Backup Schedule will run on array of Days like, Monday, Tuesday etc. Applies in Weekly Backup Type only."
            }
        },
        "scheduleRunTimes": {
            "type": "array",
            "metadata": {
                "description": "Times in day when backup should be triggered. e.g. 01:00, 13:00. This will be used in LTR too for daily, weekly, monthly and yearly backup."
            }
        },
        "weeklyRetentionDurationCount": {
            "type": "int",
            "metadata": {
                "description": "Number of weeks you want to retain the backup"
            }
        },
        "daysOfTheWeekForMontlyRetention": {
            "type": "array",
            "metadata": {
                "description": "Array of Days for Monthly Retention (Min One or Max all values from scheduleRunDays, but not any other days which are not part of scheduleRunDays)"
            }
        },
        "weeksOfTheMonthForMonthlyRetention": {
            "type": "array",
            "metadata": {
                "description": "Array of Weeks for Monthly Retention - First, Second, Third, Fourth, Last"
            }
        },
        "monthlyRetentionDurationCount": {
            "type": "int",
            "metadata": {
                "description": "Number of months you want to retain the backup"
            }
        },
        "monthsOfYear": {
            "type": "array",
            "metadata": {
                "description": "Array of Months for Yearly Retention"
            }
        },
        "daysOfTheWeekForYearlyRetention": {
            "type": "array",
            "metadata": {
                "description": "Array of Days for Yearly Retention (Min One or Max all values from scheduleRunDays, but not any other days which are not part of scheduleRunDays)"
            }
        },
        "weeksOfTheMonthForYearlyRetention": {
            "type": "array",
            "metadata": {
                "description": "Array of Weeks for Yearly Retention - First, Second, Third, Fourth, Last"
            }
        },
        "yearlyRetentionDurationCount": {
            "type": "int",
            "metadata": {
                "description": "Number of years you want to retain the backup"
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'sawinvm')]",
        "sizeOfDiskInGB": "100",
        "dataDisk1VhdName": "datadisk1",
        "location": "[resourceGroup().location]",
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "OSDiskName": "osdiskforwindowssimple",
        "nicName": "myVMNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountType": "Standard_LRS",
        "publicIPAddressName": "myPublicIP",
        "publicIPAddressType": "Dynamic",
        "vmStorageAccountContainerName": "vhds",
        "vmName": "NewSimpleWinVM",
        "vmSize": "Standard_D1",
        "virtualNetworkName": "MyVNET",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "apiVersion": "2015-06-15"
    },
    "resources": [
        {
          "type": "Microsoft.Storage/storageAccounts",
          "name": "[variables('storageAccountName')]",
          "apiVersion": "[variables('apiVersion')]",
          "location": "[variables('location')]",
          "properties": {
            "accountType": "[variables('storageAccountType')]"
          }
        },
        {
          "apiVersion": "[variables('apiVersion')]",
          "type": "Microsoft.Network/publicIPAddresses",
          "name": "[variables('publicIPAddressName')]",
          "location": "[variables('location')]",
          "properties": {
            "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
            "dnsSettings": {
              "domainNameLabel": "[parameters('dnsLabelPrefix')]"
            }
          }
        },
        {
          "apiVersion": "[variables('apiVersion')]",
          "type": "Microsoft.Network/virtualNetworks",
          "name": "[variables('virtualNetworkName')]",
          "location": "[variables('location')]",
          "properties": {
            "addressSpace": {
              "addressPrefixes": [
                "[variables('addressPrefix')]"
              ]
            },
            "subnets": [
              {
                "name": "[variables('subnetName')]",
                "properties": {
                  "addressPrefix": "[variables('subnetPrefix')]"
                }
              }
            ]
          }
        },
        {
          "apiVersion": "[variables('apiVersion')]",
          "type": "Microsoft.Network/networkInterfaces",
          "name": "[variables('nicName')]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
          ],
          "properties": {
            "ipConfigurations": [
              {
                "name": "ipconfig1",
                "properties": {
                  "privateIPAllocationMethod": "Dynamic",
                  "publicIPAddress": {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                  },
                  "subnet": {
                    "id": "[variables('subnetRef')]"
                  }
                }
              }
            ]
          }
        },
        {
          "apiVersion": "[variables('apiVersion')]",
          "type": "Microsoft.Compute/virtualMachines",
          "name": "[variables('vmName')]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
            "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
          ],
          "properties": {
            "hardwareProfile": {
              "vmSize": "[variables('vmSize')]"
            },
            "osProfile": {
              "computerName": "[variables('vmName')]",
              "adminUsername": "[parameters('adminUsername')]",
              "adminPassword": "[parameters('adminPassword')]"
            },
            "storageProfile": {
              "imageReference": {
                "publisher": "[variables('imagePublisher')]",
                "offer": "[variables('imageOffer')]",
                "sku": "[parameters('windowsOSVersion')]",
                "version": "latest"
              },
              "osDisk": {
                "name": "osdisk",
                "vhd": {
                  "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
                },
                "caching": "ReadWrite",
                "createOption": "FromImage"
              },
              "dataDisks": [
                {
                  "name": "datadisk1",
                  "diskSizeGB": "[variables('sizeOfDiskInGB')]",
                  "lun": 0,
                  "vhd": {
                    "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('dataDisk1VhdName'),'.vhd')]"
                  },
                  "createOption": "Empty"
                }
              ]
            },
            "networkProfile": {
              "networkInterfaces": [
                {
                  "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                }
              ]
            },
            "diagnosticsProfile": {
              "bootDiagnostics": {
                "enabled": "true",
                "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
              }
            }
          }
        },
        {
            "type": "Microsoft.RecoveryServices/vaults",
            "apiVersion": "2015-11-10",
            "name": "[parameters('vaultName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "RS0",
                "tier": "Standard"
            },
            "properties": {
            }
        },
        {
            "apiVersion": "2015-11-10",
            "name": "[concat(parameters('vaultName'), '/', parameters('policyName'))]",
            "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
            "dependsOn": [ "[concat('Microsoft.RecoveryServices/vaults/', parameters('vaultName'))]" ],
            "location": "[parameters('location')]",
            "properties": {
                "backupManagementType": "AzureIaasVM",
                "schedulePolicy": {
                    "scheduleRunFrequency": "Weekly",
                    "scheduleRunDays": "[parameters('scheduleRunDays')]",
                    "scheduleRunTimes": "[parameters('scheduleRunTimes')]",
                    "scheduleRunTimesNew": [ ],
                    "schedulePolicyType": "SimpleSchedulePolicy"
                },
                "retentionPolicy": {
                    "dailySchedule": null,
                    "weeklySchedule": {
                        "daysOfTheWeek": "[parameters('scheduleRunDays')]",
                        "retentionTimes": "[parameters('scheduleRunTimes')]",
                        "retentionTimesNew": [ ],
                        "retentionDuration": {
                            "count": "[parameters('weeklyRetentionDurationCount')]",
                            "durationType": "Weeks"
                        }
                    },
                    "monthlySchedule": {
                        "retentionScheduleFormatType": "Weekly",
                        "retentionScheduleDaily": {
                            "daysOfTheMonth": [
                                {
                                    "date": 1,
                                    "isLast": false
                                }
                            ]
                        },
                        "retentionScheduleWeekly": {
                            "daysOfTheWeek": "[parameters('daysOfTheWeekForMontlyRetention')]",
                            "weeksOfTheMonth": "[parameters('weeksOfTheMonthForMonthlyRetention')]"
                        },
                        "retentionTimes": "[parameters('scheduleRunTimes')]",
                        "retentionTimesNew": [ ],
                        "retentionDuration": {
                            "count": "[parameters('monthlyRetentionDurationCount')]",
                            "durationType": "Months"
                        }
                    },
                    "yearlySchedule": {
                        "retentionScheduleFormatType": "Weekly",
                        "monthsOfYear": "[parameters('monthsOfYear')]",
                        "retentionScheduleDaily": {
                            "daysOfTheMonth": [
                                {
                                    "date": 1,
                                    "isLast": false
                                }
                            ]
                        },
                        "retentionScheduleWeekly": {
                            "daysOfTheWeek": "[parameters('daysOfTheWeekForYearlyRetention')]",
                            "weeksOfTheMonth": "[parameters('weeksOfTheMonthForYearlyRetention')]"
                        },
                        "retentionTimes": "[parameters('scheduleRunTimes')]",
                        "retentionTimesNew": [ ],
                        "retentionDuration": {
                            "count": "[parameters('yearlyRetentionDurationCount')]",
                            "durationType": "Years"
                        }
                    },
                    "retentionPolicyType": "LongTermRetentionPolicy"
                }
            }
        },
        {
          "name": "[concat(parameters('existingRecoveryServicesVaultName'), '/', variables('backupFabric'), '/', parameters('existingProtectionContainers')[copyIndex()], '/', parameters('existingProtectableItems')[copyIndex()])]",
          "apiVersion": "2015-11-10",
          "location": "[resourceGroup().location]",
          "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
          "copy": {
            "name": "protectedItemsCopy",
            "count": "[length(parameters('existingProtectableItems'))]"
          },
          "properties": {
            "protectedItemType": "[variables('protectedItemType')]",
            "policyId": "[parameters('existingBackupPolicyName')]"
          }
        }
    ]
}
